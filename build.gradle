import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "io.gitlab.arturbosch.detekt"
    id "androidx.navigation.safeargs.kotlin" apply false
    id "com.android.library" apply false
    id 'com.google.gms.google-services' apply false
    id "org.jetbrains.kotlin.plugin.parcelize" apply false
}

ext {
    minSdkVersion = 24
    compileSdkVersion = 31
    targetSdkVersion = 31
}

ext {
    // libs
    automatticRestVersion = '1.0.8'
    wordPressLintVersion = '1.1.0'
    wordPressGraphviewVersion = '3.4.0'
    wordPressPersistentEditTextVersion = '1.0.2'
    wordPressEmailChecker2Version = '1.1.0'
    fluxCVersion = '2.6.0'
    wordPressUtilsVersion = '3.1.0'
    wordPressLoginVersion = '1.0.0'
    aztecVersion = 'v1.6.2'
    gutenbergMobileVersion = 'v1.85.0'
    storiesVersion = '2.0.0'
    aboutAutomatticVersion = '1.0.0'

    // debug
    stethoVersion = '1.6.0'

    // main
    coroutinesVersion = '1.5.2'
    androidInstallReferrerVersion = '2.2'
    androidxWorkVersion = "2.7.0"
    appCompatVersion = '1.1.0'
    androidxCoreVersion = '1.3.2'
    androidxArchCoreVersion = '2.0.0'
    androidxCardviewVersion = '1.0.0'
    androidXExifInterfaceVersion = '1.0.0'
    androidxViewpager2Version = '1.0.0'
    androidxVectordrawableAnimatedVersion = '1.0.0'
    androidxGridlayoutVersion = '1.0.0'
    androidXLegacySupportCoreUiVersion = '1.0.0'
    androidXLegacySupportV4Version = '1.0.0'
    androidXMultidexVersion = '2.0.1'
    androidxMediaVersion = '1.0.1'
    androidxPercentlayoutVersion = '1.0.0'
    androidxRecyclerviewVersion = '1.0.0'
    eventBusVersion = '3.3.1'
    firebaseConfigVersion = '19.1.3'
    firebaseMessagingVersion = '21.1.0'
    fragmentVersion = '1.4.1'
    constraintLayoutVersion = '1.1.3'
    materialVersion = '1.2.1'
    okioVersion = '2.8.0'
    photoviewVersion = '2.3.0'
    playServicesAuthVersion = '20.3.0'
    playServicesCodeScannerVersion = '16.0.0-beta1'
    preferenceVersion = '1.1.0'
    swipeToRefreshVersion = '1.1.0'
    uCropVersion = '2.2.4'
    lifecycleVersion = '2.4.1'
    tracksVersion = '2.2.0'
    roomVersion = '2.3.0'
    exoPlayerVersion = '2.13.3'
    composeVersion = '1.1.1'
    kotlinPoetVersion = '1.6.0'
    autoServiceVersion = '1.0'
    commonsTextVersion = '1.10.0'
    httpClientAndroidVersion = '4.3.5.1'
    volleyVersion = '1.1.1'
    jsoupVersion = '1.10.3'
    gsonVersion = '2.6.2'

    // test
    jUnitVersion = '4.13'
    androidxTestCoreVersion = '1.4.0'
    assertJVersion = '3.11.1'
    mockitoVersion = "4.8.1"
    mockitoKotlinVersion = '4.0.0'

    // android test
    wiremockVersion = '2.26.3'
    jUnitExtVersion = '1.1.3'
    espressoVersion = '3.4.0'

    // other
    coreLibraryDesugaringVersion = '1.1.5'
}

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
            content {
                includeVersion "com.android.volley", "volley", "1.1.1"
                includeVersion "com.automattic", "rest", "1.0.8"
                includeVersion "com.google.android", "flexbox", "2.0.1"
                includeVersion "org.wordpress", "emailchecker2", "1.1.0"
                includeVersion "org.wordpress", "persistentedittext", "1.0.2"
                includeVersion "org.wordpress", "wellsql-core", "1.6.0"
                includeVersion "org.wordpress", "wellsql", "1.6.0"
                // Required for detekt
                includeVersion "org.jetbrains.kotlinx", "kotlinx-html-jvm", "0.7.2"
                // Required for lintWordpressVanillaRelease
                includeVersion "com.jraska", "falcon", "2.1.1"
            }
        }
        flatDir {
            dirs '../aars'
        }
    }

    tasks.register("checkstyle", Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }

    detekt {
        toolVersion = gradle.ext.detektVersion
        baseline = file("${project.rootDir}/config/detekt/baseline.xml")
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        autoCorrect = false
        buildUponDefaultConfig = true
        disableDefaultRuleSets = false
        ignoreFailures = false
        parallel = true
        debug = false
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
            allWarningsAsErrors = true
            freeCompilerArgs += [
                    "-Xopt-in=kotlin.RequiresOptIn"
            ]
        }
    }
}

// Onboarding and dev env setup tasks
tasks.register("checkBundler", Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("checkBundle", Exec) {
    dependsOn tasks.named("checkBundler")
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("applyCredentials", Exec) {
    dependsOn tasks.named("checkBundle")
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$gradle.ext.detektVersion"
}
